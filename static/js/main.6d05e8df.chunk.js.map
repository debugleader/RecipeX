{"version":3,"sources":["Recipe.js","Recipebig.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","infoKey","title","image","queryparam","replace","useEffect","AOS","init","className","data-aos","workdone","href","target","src","alt","Recipebig","Loader","style","loading","App","lastId","useState","recipes","setRecipes","search","setSearch","query","setQuery","stylos","setStylos","setLoading","windowSize","setWindowSize","REQ","window","matchMedia","getRecipes","i","newId","a","fetch","res","json","data","work","hits","forEach","element","recipe","calories","Math","round","console","log","label","final","map","key","notFinal","onSubmit","e","preventDefault","type","value","onChange","opacity","matches","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d05e8df.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n\r\nexport default function Recipe({ infoKey, title, image }) {\r\n  const queryparam = title.replace(/ /g, \"+\");\r\n\r\n  useEffect(() => {\r\n    AOS.init();\r\n  }, []);\r\n\r\n  const workdone = (infoKey) => {\r\n    var workKey = infoKey % 4;\r\n    switch (workKey) {\r\n      case 0:\r\n        return \"flip-up\";\r\n      case 1:\r\n        return \"flip-down\";\r\n      case 2:\r\n        return \"flip-left\";\r\n      case 3:\r\n        return \"flip-right\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"recipe-item\" data-aos={workdone(infoKey)}>\r\n      <h1>\r\n        <a\r\n          href={`http://www.google.com/search?q=${queryparam}`}\r\n          target=\"_blank\"\r\n        >\r\n          {title}\r\n        </a>\r\n      </h1>\r\n      {/* <p>{calories} calories</p> */}\r\n      <div className=\"img-container\">\r\n        <a\r\n          href={`http://www.google.com/search?q=${queryparam}`}\r\n          target=\"_blank\"\r\n        >\r\n          <img src={image} alt={`Image of ${title}`} />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Recipebig({ title, image }) {\r\n  const queryparam = title.replace(/ /g, \"+\");\r\n  return (\r\n    <div className=\"recipe-item\">\r\n      <h1>\r\n        <a\r\n          href={`http://www.google.com/search?q=${queryparam}`}\r\n          target=\"_blank\"\r\n        >\r\n          {title}\r\n        </a>\r\n      </h1>\r\n      {/* <p>{calories} calories</p> */}\r\n      <div className=\"img-container\">\r\n        <a\r\n          href={`http://www.google.com/search?q=${queryparam}`}\r\n          target=\"_blank\"\r\n        >\r\n          <img src={image} alt={`Image of ${title}`} />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loader({ style, loading }) {\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <h1 className=\"err\" style={style}>\r\n          Loading...\r\n        </h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport Recipebig from \"./Recipebig\";\r\nimport Loader from \"./Loader\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const APP_ID = \"02ed5e12\";\r\n  const APP_KEY = \"301f8c58ac9ffd6ee4906f68d1b010c9\";\r\n\r\n  let lastId = 0;\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"banana\");\r\n  const [stylos, setStylos] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [windowSize, setWindowSize] = useState({});\r\n  const REQ = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n\r\n  useEffect(() => {\r\n    setWindowSize(window.matchMedia(\"(max-width: 800px)\"));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getRecipes();\r\n  }, [query]);\r\n  var i = 0;\r\n  const newId = (prefix = \"id\") => {\r\n    if (i == 0) {\r\n      lastId++;\r\n      i++;\r\n    } else {\r\n      i--;\r\n    }\r\n    return lastId;\r\n  };\r\n\r\n  const getRecipes = async () => {\r\n    const res = await fetch(REQ);\r\n    const data = await res.json();\r\n    const work = data.hits;\r\n    const final = work.forEach(\r\n      (element) =>\r\n        (element.recipe.calories = Math.round(element.recipe.calories))\r\n    );\r\n    console.log(data.hits);\r\n    if (data.hits[0]) {\r\n      if (data.hits[0].recipe.label) {\r\n        setStylos(false);\r\n      }\r\n    } else {\r\n      setStylos(true);\r\n    }\r\n    setRecipes(data.hits);\r\n    setLoading(false);\r\n  };\r\n  const final = recipes.map((recipe) => (\r\n    <Recipe\r\n      key={newId()}\r\n      infoKey={newId()}\r\n      title={recipe.recipe.label}\r\n      calories={recipe.recipe.calories}\r\n      image={recipe.recipe.image}\r\n    />\r\n  ));\r\n\r\n  const notFinal = recipes.map((recipe) => (\r\n    <Recipebig\r\n      key={newId()}\r\n      infoKey={newId()}\r\n      title={recipe.recipe.label}\r\n      calories={recipe.recipe.calories}\r\n      image={recipe.recipe.image}\r\n    />\r\n  ));\r\n\r\n  const onChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setLoading(true);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header\">\r\n        <h1 className=\"recipeX\">RecipeX</h1>\r\n      </header>\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input\r\n          className=\"search-bar\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={onChange}\r\n        />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Go!\r\n        </button>\r\n      </form>\r\n      <Loader\r\n        style={loading ? { opacity: 1 } : { opacity: 0 }}\r\n        loading={loading}\r\n      />\r\n      <div className=\"container\">{windowSize.matches ? final : notFinal}</div>\r\n      <h1 style={stylos ? { opacity: 1 } : { opacity: 0 }} className=\"err\">\r\n        Sorry, your search query did not match any result in our API!\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}